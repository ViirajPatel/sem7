utils:::menuInstallPkgs()
require(zoo)
utils:::menuInstallPkgs()
require(TTR)
MSFT<-read.delim('clipboard')
MSFT.rets<-na.trim(ROC(MSFT$Close,type="discrete",n=1))
MSFT.rets
best.aic <- 1e9
best.model <- NA
for (p in 0:2) {
  for (d in 0:2) {
    for (q in 0:2) {
      for (P in 0:2) {
        for (D in 0:2) {
          for (Q in 0:2) {
            r <- list(aic=NA)
            try( 
              r <- arima( MSFT.rets, 
                          order=c(p,d,q),
                          list(order=c(P,D,Q), period=12) 
                        )
            )
if (r$aic < best.aic)
{
best.aic <- r$aic
best.model <- r
}
          }
        }
      }
    }
  }
}
best.aic <- 1e9
best.model <- NA
for (p in 0:2) {
for (d in 0:2) {
for (q in 0:2) {
r <- list(aic=NA)
try( 
r <- arima( MSFT.rets, 
order=c(p,d,q),
list(order=c(P,D,Q), period=12))
)
if (r$aic < best.aic)
{
best.aic <- r$aic
best.model <- r
}
}
}
}
best.aic <- 1e9
best.model <- NA
for (p in 0:2) {
for (d in 0:2) {
for (q in 0:2) {
r <- list(aic=NA)
try( 
r <- arima( MSFT.rets, 
order=c(p,d,q))
if (r$aic < best.aic)
{
best.aic <- r$aic
best.model <- r
}
}
}
}best.aic <- 1e9
best.model <- NA
for (p in 0:2) {
for (d in 0:2) {
for (q in 0:2) {
r <- list(aic=NA)
try( 
r <- arima( MSFT.rets, 
order=c(p,d,q))
if (r$aic < best.aic)
{
best.aic <- r$aic
best.model <- r
}
}
}
MSFT.rets
best.aic <- 1e9
best.model <- NA
for (p in 0:10) {
for (q in 0:10) {
r <- arima( MSFT.rets, 
order=c(p,0,q))
if (r$aic < best.aic)
{
best.aic <- r$aic
best.model <- r
}
}
}
warnings()
best.aic <- 1e9
best.model <- NA
for (p in 0:5) {
for (q in 0:5) {
r <- arima( MSFT.rets, 
order=c(p,0,q))
if (r$aic < best.aic)
{
best.aic <- r$aic
best.model <- r
}
}
}
best.aic <- 1e9
best.model <- NA
for (p in 0:3) {
for (q in 0:3) {
r <- arima( MSFT.rets, 
order=c(p,0,q))
if (r$aic < best.aic)
{
best.aic <- r$aic
best.model <- r
}
}
}
best.aic <- 1e9
best.model <- NA
for (p in 0:2) {
for (q in 0:2) {
r <- arima( MSFT.rets, 
order=c(p,0,q))
if (r$aic < best.aic)
{
best.aic <- r$aic
best.model <- r
}
}
}
require(zoo)    #na.trim
require(TTR)    #ROC
MSFT<-read.delim("clipboard")
MSFT.rets<-na.trim(ROC(MSFT$Close,type="discrete",n=1))
Citi<-read.delim("clipboard")
Citi.rets<-na.trim(ROC(Citi$Close,type="discrete",n=1))
IBM<-read.delim("clipboard")
IBM.rets<-na.trim(ROC(IBM$Close,type="discrete",n=1))
op<-par(mfrow=c(3,3),mar=c(2,4,3,2)+.1)
plot.ts(MSFT$Date,MSFT.rets,main="MSFT",xlab="time",ylab="MSFT ROC",type="l")
plot.ts(1:1258,MSFT.rets,main="MSFT",xlab="time",ylab="MSFT ROC",type="l")
plot.ts(1258:1,MSFT.rets,main="MSFT",xlab="time",ylab="MSFT ROC",type="l")
op<-par(mfrow=c(3,3),mar=c(2,4,3,2)+.1)
op<-par(mfrow=c(3,3),mar=c(2,4,3,2)+.1)
plot.ts(1258:1,MSFT.rets,main="MSFT",xlab="time",ylab="MSFT ROC",type="l")
acf(MSFT.rets,main="")
pacf(MSFT.rets,main="")
plot.ts(1258:1,Citi.rets,main="Citi",xlab="time",ylab="Citi ROC",type="l")
acf(Citi.rets,main="")
pacf(Citi.rets,main="")
plot.ts(1258:1,IBM.rets,main="IBM",xlab="time",ylab="IBM ROC",type="l")
acf(IBM.rets,main="")
pacf(IBM.rets,main="")
par(op)
utils:::menuInstallPkgs()
library(tseries)
adf.test(MSFT.rets)
#Phillips每Perron Unit Root Test
pp.test(MSFT.rets)
#Augmented Dickey每Fuller Test for Citi
adf.test(Citi.rets)
#Phillips每Perron Unit Root Test
pp.test(Citi.rets)
#Augmented Dickey每Fuller Test for IBM
adf.test(IBM.rets)
#Phillips每Perron Unit Root Test
pp.test(IBM.rets)
best.aic <- 1e9
best.model <- NA
for (p in 0:5) {
for (q in 0:5) {
r <- list(aic=NA)
try(
r <- arima( MSFT.rets, 
order=c(p,0,q))
)
if (r$aic < best.aic)
{
best.aic <- r$aic
best.model <- r
}
}
}
a <- array(NA, dim=c(2,2,2,2,2,2))
for (p in 0:2) {
  for (d in 0:2) {
    for (q in 0:2) {
      for (P in 0:2) {
        for (D in 0:2) {
          for (Q in 0:2) {
            r <- list(aic=NA)
            try( 
              r <- arima( MSFT.rets, 
                          order=c(p,d,q),
                          list(order=c(P,D,Q), period=12) 
                        )
            )
            a[p,d,q,P,D,Q] <- r$aic
            cat(r$aic); cat("\n")
          }
        }
      }
    }
  }
}
# When I wrote this, I dod not know the "which.min" function.
argmin.vector <- function (v) {
  (1:length(v)) [ v == min(v) ]
}
#x <- sample(1:10)
#x
#argmin.vector(x)
#x <- sample(1:5, 20, replace=T)
#x
#argmin.vector(x)
#x <- array(x, dim=c(5,2,2))
index.from.vector <- function (i,d) {
  res <- NULL
  n <- prod(d)
  i <- i-1
  for (k in length(d):1) {
    n <- n/d[k]
    res <- c( i %/% n, res )
    i <- i %% n
  }
  res+1
}
#index.from.vector(7, c(2,2,2))
#index.from.vector(29, c(5,3,2))
argmin <- function (a) {
  a <- as.array(a)
  d <- dim(a)
  a <- as.vector(a)
  res <- matrix(nr=0, nc=length(d))
  for (i in (1:length(a))[ a == min(a) ]) {
    j <- index.from.vector(i,d)
    res <- rbind(res, j)
  }
  res
}
#x <- array( sample(1:10,30, replace=T), dim=c(5,3,2) )
argmin(a)
require(tseries)
#Augmented Dickey每Fuller Test for MSFT
adf.test(MSFT.rets)
#Phillips每Perron Unit Root Test
pp.test(MSFT.rets)
#Augmented Dickey每Fuller Test for Citi
adf.test(Citi.rets)
#Phillips每Perron Unit Root Test
pp.test(Citi.rets)
#Augmented Dickey每Fuller Test for IBM
adf.test(IBM.rets)
#Phillips每Perron Unit Root Test
pp.test(IBM.rets)
?pp.test
a = adf.test(MSFT.rets)
a
a$p.value
round(a$p.value, 4)
MSFT.rets
a = adf.test(MSFT.rets)
a
?adf.test
a$parameter
a$statistic
a$p.value
a$method
a$data.name
a$alternative
a$data.name
best.aic <- 1e9
best.model <- NA
for (p in 0:2) {
for (q in 0:2) {
r <- list(aic=NA)
try(
r <- arima( MSFT.rets, 
order=c(p,0,q))
)
if (r$aic < best.aic)
{
best.aic <- r$aic
best.model <- r
}
}
}
best.aic
best.model
best.aic <- 1e9
best.model <- NA
for (p in 0:2) {
for (q in 0:2) {
r <- list(aic=NA)
r <- arima( MSFT.rets, 
order=c(p,0,q))
if (r$aic < best.aic)
{
best.aic <- r$aic
best.model <- r
}
}
}
best.aic
best.model
best.aic <- 1e9
best.model <- NA
for (p in 0:4) {
for (q in 0:4) {
r <- list(aic=NA)
r <- arima( MSFT.rets, 
order=c(p,0,q))
if (r$aic < best.aic)
{
best.aic <- r$aic
best.model <- r
}
}
}
best.model
a <- array(0, dim = c(2, 2))
a
a[0,0]=1
a
source("model_selection.R")
source("model_selection.R")
source("model_selection.R")
a <- c(1, 2, 3)
a
plot(a)
a
source("model_selection.R")
